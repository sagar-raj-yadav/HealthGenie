{"version":3,"file":"static/js/main.3a511c29.js","mappings":"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","sources":["src/contexts/HealthDataContext.tsx","src/utils/dateUtils.ts","src/styles/colors.ts","src/screens/HomeScreen.tsx","src/utils/validation.ts","src/components/WaterIntakeTracker.tsx","src/screens/WaterIntakeScreen.tsx","src/components/ProgressChart.tsx","src/screens/StepCountScreen.tsx","src/screens/WeightScreen.tsx","src/screens/BloodPressureScreen.tsx","src/screens/HeartRateScreen.tsx","src/screens/HabitTrackingScreen.tsx","src/navigation/AppNavigator.tsx","App.tsx","index.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import React, {createContext, useState, useEffect, useContext} from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {\n  WaterIntake,\n  StepCount,\n  Weight,\n  BloodPressure,\n  HeartRate,\n  Habit,\n  HealthData,\n} from '../types';\n\ninterface HealthDataContextType {\n  healthData: HealthData;\n  waterIntake: WaterIntake[];\n  stepCounts: StepCount[];\n  weights: Weight[];\n  bloodPressures: BloodPressure[];\n  heartRates: HeartRate[];\n  habits: Habit[];\n  addWaterIntake: (intake: WaterIntake) => Promise<void>;\n  addStepCount: (steps: StepCount) => Promise<void>;\n  addWeight: (weight: Weight) => Promise<void>;\n  addBloodPressure: (bp: BloodPressure) => Promise<void>;\n  addHeartRate: (hr: HeartRate) => Promise<void>;\n  addHabit: (habit: Habit) => Promise<void>;\n  updateHabit: (habitId: string, updates: Partial<Habit>) => Promise<void>;\n  deleteHabit: (habitId: string) => Promise<void>;\n  toggleHabitCompletion: (habitId: string, date: string) => Promise<void>;\n  isLoading: boolean;\n}\n\nconst defaultHealthData: HealthData = {\n  waterIntake: [],\n  stepCounts: [],\n  weights: [],\n  bloodPressures: [],\n  heartRates: [],\n  habits: [],\n};\n\nconst HealthDataContext = createContext<HealthDataContextType | undefined>(\n  undefined,\n);\n\nexport const HealthDataProvider: React.FC<{children: React.ReactNode}> = ({\n  children,\n}) => {\n  const [healthData, setHealthData] = useState<HealthData>(defaultHealthData);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const data = await AsyncStorage.getItem('healthData');\n        if (data) {\n          setHealthData(JSON.parse(data));\n        }\n      } catch (error) {\n        console.error('Failed to load health data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const saveHealthData = async (data: HealthData) => {\n    try {\n      await AsyncStorage.setItem('healthData', JSON.stringify(data));\n      setHealthData(data);\n    } catch (error) {\n      console.error('Failed to save health data:', error);\n    }\n  };\n\n  const addWaterIntake = async (intake: WaterIntake) => {\n    const updatedData = {\n      ...healthData,\n      waterIntake: [...healthData.waterIntake, intake],\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const addStepCount = async (steps: StepCount) => {\n    const updatedData = {\n      ...healthData,\n      stepCounts: [...healthData.stepCounts, steps],\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const addWeight = async (weight: Weight) => {\n    const updatedData = {\n      ...healthData,\n      weights: [...healthData.weights, weight],\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const addBloodPressure = async (bp: BloodPressure) => {\n    const updatedData = {\n      ...healthData,\n      bloodPressures: [...healthData.bloodPressures, bp],\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const addHeartRate = async (hr: HeartRate) => {\n    const updatedData = {\n      ...healthData,\n      heartRates: [...healthData.heartRates, hr],\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const addHabit = async (habit: Habit) => {\n    const updatedData = {\n      ...healthData,\n      habits: [...healthData.habits, habit],\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const updateHabit = async (habitId: string, updates: Partial<Habit>) => {\n    const updatedHabits = healthData.habits.map((habit) =>\n      habit.id === habitId ? {...habit, ...updates} : habit,\n    );\n    const updatedData = {\n      ...healthData,\n      habits: updatedHabits,\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const deleteHabit = async (habitId: string) => {\n    const updatedHabits = healthData.habits.filter(\n      (habit) => habit.id !== habitId,\n    );\n    const updatedData = {\n      ...healthData,\n      habits: updatedHabits,\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const toggleHabitCompletion = async (habitId: string, date: string) => {\n    const updatedHabits = healthData.habits.map((habit) => {\n      if (habit.id === habitId) {\n        const completedDates = habit.completedDates || [];\n        const dateIndex = completedDates.indexOf(date);\n        \n        if (dateIndex >= 0) {\n          // Remove the date if it's already there (toggle off)\n          return {\n            ...habit,\n            completedDates: [\n              ...completedDates.slice(0, dateIndex),\n              ...completedDates.slice(dateIndex + 1),\n            ],\n          };\n        } else {\n          // Add the date if it's not there (toggle on)\n          return {\n            ...habit,\n            completedDates: [...completedDates, date],\n          };\n        }\n      }\n      return habit;\n    });\n\n    const updatedData = {\n      ...healthData,\n      habits: updatedHabits,\n    };\n    await saveHealthData(updatedData);\n  };\n\n  const value: HealthDataContextType = {\n    healthData,\n    waterIntake: healthData.waterIntake,\n    stepCounts: healthData.stepCounts,\n    weights: healthData.weights,\n    bloodPressures: healthData.bloodPressures,\n    heartRates: healthData.heartRates,\n    habits: healthData.habits,\n    addWaterIntake,\n    addStepCount,\n    addWeight,\n    addBloodPressure,\n    addHeartRate,\n    addHabit,\n    updateHabit,\n    deleteHabit,\n    toggleHabitCompletion,\n    isLoading,\n  };\n\n  return (\n    <HealthDataContext.Provider value={value}>\n      {children}\n    </HealthDataContext.Provider>\n  );\n};\n\nexport const useHealthData = () => {\n  const context = useContext(HealthDataContext);\n  if (context === undefined) {\n    throw new Error('useHealthData must be used within a HealthDataProvider');\n  }\n  return context;\n};\n","// Format a Date object to yyyy-mm-dd\nexport const formatDate = (date: Date): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Format a Date object to HH:MM\nexport const formatTime = (date: Date): string => {\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  return `${hours}:${minutes}`;\n};\n\n// Get full timestamp\nexport const getTimestamp = (): string => {\n  return new Date().toISOString();\n};\n\n// Get today's date in yyyy-mm-dd format\nexport const getTodayDate = (): string => {\n  return formatDate(new Date());\n};\n\n// Get a date range (for week or month views)\nexport const getDateRange = (days: number): string[] => {\n  const dates: string[] = [];\n  const today = new Date();\n  \n  for (let i = 0; i < days; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    dates.push(formatDate(date));\n  }\n  \n  return dates.reverse();\n};\n\n// Format date for display (e.g., \"Mon, Jan 1\")\nexport const formatDateForDisplay = (dateStr: string): string => {\n  const date = new Date(dateStr);\n  return date.toLocaleDateString('en-US', {\n    weekday: 'short',\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\n// Check if a date is today\nexport const isToday = (dateStr: string): boolean => {\n  return dateStr === getTodayDate();\n};\n\n// Get day of week (0-6, where 0 is Sunday)\nexport const getDayOfWeek = (dateStr: string): number => {\n  return new Date(dateStr).getDay();\n};\n\n// Get week number of the date\nexport const getWeekNumber = (dateStr: string): number => {\n  const date = new Date(dateStr);\n  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n  const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n};\n\n// Get days of current week\nexport const getDaysOfCurrentWeek = (): string[] => {\n  return getDateRange(7);\n};\n","// Define app color palette\nconst colors = {\n  primary: '#4CAF50', // Green for health\n  secondary: '#2196F3', // Blue\n  background: '#F5F7FA', // Light background\n  cardBackground: '#FFFFFF', // White card background\n  text: '#333333', // Dark gray for primary text\n  textSecondary: '#757575', // Medium gray for secondary text\n  border: '#E0E0E0', // Light gray for borders\n  inputBackground: '#F5F5F5', // Very light gray for inputs\n  lightGray: '#E0E0E0', // Light gray for inactive elements\n  white: '#FFFFFF', // White\n  black: '#000000', // Black\n  \n  // Status colors\n  success: '#4CAF50', // Green for success states\n  error: '#F44336', // Red for errors\n  warning: '#FF9800', // Orange for warnings\n  info: '#2196F3', // Blue for information\n  \n  // Specific feature colors\n  water: '#2196F3', // Blue for water tracking\n  steps: '#8BC34A', // Light green for step counting\n  weight: '#9C27B0', // Purple for weight tracking\n  bloodPressure: '#F44336', // Red for blood pressure\n  heartRate: '#E91E63', // Pink for heart rate\n  habits: '#FF9800', // Orange for habit tracking\n};\n\nexport default colors;\n","import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport {useNavigation} from '@react-navigation/native';\nimport {StackNavigationProp} from '@react-navigation/stack';\nimport {RootStackParamList} from '../types';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {getTodayDate, formatDateForDisplay} from '../utils/dateUtils';\nimport colors from '../styles/colors';\n\ntype HomeScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Home'>;\n\nconst HomeScreen: React.FC = () => {\n  const navigation = useNavigation<HomeScreenNavigationProp>();\n  const {\n    waterIntake,\n    stepCounts,\n    weights,\n    bloodPressures,\n    heartRates,\n    habits,\n    isLoading,\n  } = useHealthData();\n\n  const today = getTodayDate();\n\n  // Get today's summary data\n  const getTodayWaterIntake = () => {\n    const todayEntries = waterIntake.filter(entry => entry.date === today);\n    return todayEntries.reduce((sum, entry) => sum + entry.amount, 0);\n  };\n\n  const getTodaySteps = () => {\n    const todayEntries = stepCounts.filter(entry => entry.date === today);\n    if (todayEntries.length === 0) return 0;\n    \n    // Get the latest entry\n    const latestEntry = [...todayEntries].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )[0];\n    return latestEntry.count;\n  };\n\n  const getLatestWeight = () => {\n    if (weights.length === 0) return null;\n    \n    const latestEntry = [...weights].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )[0];\n    return latestEntry.value;\n  };\n\n  const getLatestBloodPressure = () => {\n    if (bloodPressures.length === 0) return null;\n    \n    const latestEntry = [...bloodPressures].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )[0];\n    return `${latestEntry.systolic}/${latestEntry.diastolic}`;\n  };\n\n  const getLatestHeartRate = () => {\n    if (heartRates.length === 0) return null;\n    \n    const latestEntry = [...heartRates].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )[0];\n    return latestEntry.bpm;\n  };\n\n  const getHabitsForToday = () => {\n    return habits.filter(habit => {\n      const dayOfWeek = new Date(today).getDay();\n      const dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][dayOfWeek];\n      return habit.frequency.includes(dayName);\n    });\n  };\n\n  const getCompletedHabitsCount = () => {\n    const todayHabits = getHabitsForToday();\n    return todayHabits.filter(habit => habit.completedDates.includes(today)).length;\n  };\n\n  if (isLoading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={colors.primary} />\n        <Text style={styles.loadingText}>Loading your health data...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Health Genie</Text>\n      <Text style={styles.date}>{formatDateForDisplay(today)}</Text>\n      \n      <View style={styles.grid}>\n        <TouchableOpacity\n          style={[styles.card, styles.waterCard]}\n          onPress={() => navigation.navigate('WaterIntake')}>\n          <Text style={styles.cardTitle}>Water</Text>\n          <Text style={styles.cardValue}>{getTodayWaterIntake()} ml</Text>\n          <Text style={styles.cardSubtitle}>Daily Goal: 2000 ml</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[styles.card, styles.stepsCard]}\n          onPress={() => navigation.navigate('StepCount')}>\n          <Text style={styles.cardTitle}>Steps</Text>\n          <Text style={styles.cardValue}>{getTodaySteps()}</Text>\n          <Text style={styles.cardSubtitle}>Daily Goal: 10,000</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[styles.card, styles.weightCard]}\n          onPress={() => navigation.navigate('Weight')}>\n          <Text style={styles.cardTitle}>Weight</Text>\n          <Text style={styles.cardValue}>\n            {getLatestWeight() ? `${getLatestWeight()} kg` : 'Not set'}\n          </Text>\n          <Text style={styles.cardSubtitle}>Latest measurement</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[styles.card, styles.bpCard]}\n          onPress={() => navigation.navigate('BloodPressure')}>\n          <Text style={styles.cardTitle}>Blood Pressure</Text>\n          <Text style={styles.cardValue}>\n            {getLatestBloodPressure() || 'Not set'}\n          </Text>\n          <Text style={styles.cardSubtitle}>Latest measurement</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[styles.card, styles.heartCard]}\n          onPress={() => navigation.navigate('HeartRate')}>\n          <Text style={styles.cardTitle}>Heart Rate</Text>\n          <Text style={styles.cardValue}>\n            {getLatestHeartRate() ? `${getLatestHeartRate()} BPM` : 'Not set'}\n          </Text>\n          <Text style={styles.cardSubtitle}>Latest measurement</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[styles.card, styles.habitCard]}\n          onPress={() => navigation.navigate('HabitTracking')}>\n          <Text style={styles.cardTitle}>Habits</Text>\n          <View style={styles.habitProgress}>\n            <Text style={styles.habitCount}>\n              {getCompletedHabitsCount()}/{getHabitsForToday().length}\n            </Text>\n            <Text style={styles.habitLabel}>Completed Today</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n      \n      <View style={styles.tipsContainer}>\n        <Text style={styles.tipsTitle}>Health Tips</Text>\n        <Text style={styles.tip}>• Drink at least 8 glasses of water daily</Text>\n        <Text style={styles.tip}>• Aim for 10,000 steps every day</Text>\n        <Text style={styles.tip}>• Regular heart rate monitoring helps track fitness</Text>\n        <Text style={styles.tip}>• Monitor blood pressure weekly for heart health</Text>\n        <Text style={styles.tip}>• Consistency in habits leads to better health outcomes</Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.background,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: colors.textSecondary,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  date: {\n    fontSize: 16,\n    color: colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  grid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  card: {\n    width: '48%',\n    backgroundColor: colors.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    elevation: 2,\n  },\n  waterCard: {\n    borderTopColor: '#2196F3',\n    borderTopWidth: 4,\n  },\n  stepsCard: {\n    borderTopColor: '#4CAF50',\n    borderTopWidth: 4,\n  },\n  weightCard: {\n    borderTopColor: '#9C27B0',\n    borderTopWidth: 4,\n  },\n  bpCard: {\n    borderTopColor: '#F44336',\n    borderTopWidth: 4,\n  },\n  heartCard: {\n    borderTopColor: '#E91E63',\n    borderTopWidth: 4,\n  },\n  habitCard: {\n    borderTopColor: '#FF9800',\n    borderTopWidth: 4,\n  },\n  cardTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: colors.textSecondary,\n    marginBottom: 8,\n  },\n  cardValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.text,\n    marginBottom: 4,\n  },\n  cardSubtitle: {\n    fontSize: 12,\n    color: colors.textSecondary,\n  },\n  habitProgress: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 8,\n  },\n  habitCount: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.text,\n  },\n  habitLabel: {\n    fontSize: 12,\n    color: colors.textSecondary,\n    marginTop: 4,\n  },\n  tipsContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    elevation: 2,\n  },\n  tipsTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.text,\n    marginBottom: 12,\n  },\n  tip: {\n    fontSize: 14,\n    color: colors.text,\n    marginBottom: 8,\n    lineHeight: 20,\n  },\n});\n\nexport default HomeScreen;\n","// Validate water intake input\nexport const validateWaterIntake = (amount: string): string | null => {\n  const value = parseFloat(amount);\n  if (isNaN(value)) {\n    return 'Please enter a valid number';\n  }\n  if (value <= 0) {\n    return 'Water intake must be greater than 0';\n  }\n  if (value > 10000) {\n    return 'Water intake cannot exceed 10 liters (10,000 ml)';\n  }\n  return null; // No error\n};\n\n// Validate step count input\nexport const validateStepCount = (steps: string): string | null => {\n  const value = parseInt(steps, 10);\n  if (isNaN(value)) {\n    return 'Please enter a valid number';\n  }\n  if (value < 0) {\n    return 'Step count cannot be negative';\n  }\n  if (value > 100000) {\n    return 'Step count seems too high';\n  }\n  return null; // No error\n};\n\n// Validate weight input\nexport const validateWeight = (weight: string): string | null => {\n  const value = parseFloat(weight);\n  if (isNaN(value)) {\n    return 'Please enter a valid number';\n  }\n  if (value <= 0) {\n    return 'Weight must be greater than 0';\n  }\n  if (value > 500) {\n    return 'Weight seems too high';\n  }\n  return null; // No error\n};\n\n// Validate blood pressure input\nexport const validateBloodPressure = (\n  systolic: string,\n  diastolic: string\n): string | null => {\n  const systolicValue = parseInt(systolic, 10);\n  const diastolicValue = parseInt(diastolic, 10);\n\n  if (isNaN(systolicValue) || isNaN(diastolicValue)) {\n    return 'Please enter valid numbers';\n  }\n  if (systolicValue <= 0 || diastolicValue <= 0) {\n    return 'Blood pressure values must be greater than 0';\n  }\n  if (systolicValue < diastolicValue) {\n    return 'Systolic should be higher than diastolic';\n  }\n  if (systolicValue > 300) {\n    return 'Systolic value seems too high';\n  }\n  if (diastolicValue > 200) {\n    return 'Diastolic value seems too high';\n  }\n  return null; // No error\n};\n\n// Validate heart rate input\nexport const validateHeartRate = (heartRate: string): string | null => {\n  const value = parseInt(heartRate, 10);\n  if (isNaN(value)) {\n    return 'Please enter a valid number';\n  }\n  if (value <= 0) {\n    return 'Heart rate must be greater than 0';\n  }\n  if (value > 250) {\n    return 'Heart rate seems too high';\n  }\n  return null; // No error\n};\n\n// Validate habit name\nexport const validateHabitName = (name: string): string | null => {\n  if (!name.trim()) {\n    return 'Habit name cannot be empty';\n  }\n  if (name.length > 50) {\n    return 'Habit name is too long (max 50 characters)';\n  }\n  return null; // No error\n};\n","import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\nimport colors from '../styles/colors';\n\ninterface WaterIntakeTrackerProps {\n  progress: number; // 0 to 1\n  current: number;\n  goal: number;\n}\n\nconst WaterIntakeTracker: React.FC<WaterIntakeTrackerProps> = ({\n  progress,\n  current,\n  goal,\n}) => {\n  // Calculate the wave height based on progress\n  // When progress is 0, wave is at the bottom (100%)\n  // When progress is 1, wave is at the top (0%)\n  const waveHeight = `${100 - progress * 100}%`;\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.waterBottle}>\n        <View style={styles.bottleOutline}>\n          <View style={[styles.water, {height: waveHeight}]} />\n          <View style={styles.cap} />\n          <View style={styles.contentContainer}>\n            <Text style={styles.progressText}>{Math.round(progress * 100)}%</Text>\n            <Text style={styles.amountText}>{current} / {goal} ml</Text>\n          </View>\n        </View>\n      </View>\n      \n      <View style={styles.infoContainer}>\n        <View style={styles.infoItem}>\n          <Text style={styles.infoValue}>{current}</Text>\n          <Text style={styles.infoLabel}>Current (ml)</Text>\n        </View>\n        <View style={styles.infoItem}>\n          <Text style={styles.infoValue}>{goal}</Text>\n          <Text style={styles.infoLabel}>Goal (ml)</Text>\n        </View>\n        <View style={styles.infoItem}>\n          <Text style={styles.infoValue}>{goal - current}</Text>\n          <Text style={styles.infoLabel}>Remaining (ml)</Text>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginVertical: 16,\n  },\n  waterBottle: {\n    width: 120,\n    height: 220,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  bottleOutline: {\n    width: '100%',\n    height: '100%',\n    borderWidth: 4,\n    borderColor: colors.secondary,\n    borderRadius: 20,\n    overflow: 'hidden',\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    position: 'relative',\n  },\n  water: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(33, 150, 243, 0.7)',\n    borderRadius: 16,\n  },\n  cap: {\n    position: 'absolute',\n    top: -15,\n    width: 40,\n    height: 20,\n    backgroundColor: colors.secondary,\n    alignSelf: 'center',\n    borderRadius: 5,\n  },\n  contentContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  progressText: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  amountText: {\n    fontSize: 12,\n    color: colors.textSecondary,\n    marginTop: 5,\n  },\n  infoContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    paddingHorizontal: 16,\n  },\n  infoItem: {\n    alignItems: 'center',\n  },\n  infoValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  infoLabel: {\n    fontSize: 12,\n    color: colors.textSecondary,\n    marginTop: 4,\n  },\n});\n\nexport default WaterIntakeTracker;\n","import React, {useState, useEffect} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {validateWaterIntake} from '../utils/validation';\nimport {getTodayDate, getTimestamp, formatDateForDisplay} from '../utils/dateUtils';\nimport WaterIntakeTracker from '../components/WaterIntakeTracker';\nimport colors from '../styles/colors';\n\nconst WaterIntakeScreen: React.FC = () => {\n  const {waterIntake, addWaterIntake} = useHealthData();\n  const [amount, setAmount] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [dailyGoal, setDailyGoal] = useState('2000'); // Default 2000ml (2L)\n  const [todayIntake, setTodayIntake] = useState(0);\n\n  useEffect(() => {\n    calculateTodayIntake();\n  }, [waterIntake]);\n\n  const calculateTodayIntake = () => {\n    const today = getTodayDate();\n    const todayEntries = waterIntake.filter(entry => entry.date === today);\n    const total = todayEntries.reduce((sum, entry) => sum + entry.amount, 0);\n    setTodayIntake(total);\n  };\n\n  const handleAddWaterIntake = () => {\n    // Validate input\n    const validationError = validateWaterIntake(amount);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    const amountValue = parseFloat(amount);\n    const today = getTodayDate();\n    const timestamp = getTimestamp();\n\n    // Add water intake\n    addWaterIntake({\n      id: `water-${timestamp}`,\n      amount: amountValue,\n      date: today,\n      timestamp,\n    }).then(() => {\n      setAmount('');\n      setError(null);\n      Alert.alert('Success', 'Water intake added successfully!');\n    }).catch(err => {\n      Alert.alert('Error', 'Failed to save water intake.');\n      console.error(err);\n    });\n  };\n\n  const getRecentEntries = () => {\n    return [...waterIntake]\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 5);\n  };\n\n  const progress = Math.min(todayIntake / parseInt(dailyGoal, 10), 1);\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Water Intake Tracker</Text>\n      \n      <WaterIntakeTracker \n        progress={progress} \n        current={todayIntake} \n        goal={parseInt(dailyGoal, 10)} \n      />\n\n      <View style={styles.goalContainer}>\n        <Text style={styles.label}>Daily Goal (ml):</Text>\n        <TextInput\n          style={styles.goalInput}\n          value={dailyGoal}\n          onChangeText={setDailyGoal}\n          keyboardType=\"number-pad\"\n        />\n      </View>\n\n      <View style={styles.inputContainer}>\n        <Text style={styles.label}>Add Water (ml):</Text>\n        <TextInput\n          style={styles.input}\n          value={amount}\n          onChangeText={setAmount}\n          placeholder=\"Enter amount in ml\"\n          keyboardType=\"number-pad\"\n        />\n        {error && <Text style={styles.errorText}>{error}</Text>}\n        \n        <View style={styles.quickButtons}>\n          <TouchableOpacity \n            style={styles.quickButton} \n            onPress={() => setAmount('250')}>\n            <Text style={styles.quickButtonText}>+250ml</Text>\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={styles.quickButton} \n            onPress={() => setAmount('500')}>\n            <Text style={styles.quickButtonText}>+500ml</Text>\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={styles.quickButton} \n            onPress={() => setAmount('1000')}>\n            <Text style={styles.quickButtonText}>+1L</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleAddWaterIntake}>\n          <Text style={styles.addButtonText}>Add Water Intake</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.historyContainer}>\n        <Text style={styles.historyTitle}>Recent Entries</Text>\n        {getRecentEntries().length > 0 ? (\n          getRecentEntries().map((entry, index) => (\n            <View key={entry.id} style={styles.historyItem}>\n              <Text style={styles.historyDate}>\n                {formatDateForDisplay(entry.date)} at {new Date(entry.timestamp).toLocaleTimeString()}\n              </Text>\n              <Text style={styles.historyAmount}>{entry.amount} ml</Text>\n            </View>\n          ))\n        ) : (\n          <Text style={styles.emptyText}>No water intake records yet</Text>\n        )}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  inputContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 8,\n    color: colors.text,\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginBottom: 10,\n  },\n  errorText: {\n    color: colors.error,\n    marginBottom: 10,\n  },\n  quickButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  quickButton: {\n    backgroundColor: colors.secondary,\n    padding: 10,\n    borderRadius: 8,\n    flex: 1,\n    marginHorizontal: 4,\n    alignItems: 'center',\n  },\n  quickButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n  },\n  addButton: {\n    backgroundColor: colors.primary,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  goalContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20,\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    elevation: 2,\n  },\n  goalInput: {\n    flex: 1,\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginLeft: 10,\n  },\n  historyContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  historyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n    paddingVertical: 12,\n  },\n  historyDate: {\n    color: colors.textSecondary,\n  },\n  historyAmount: {\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    marginVertical: 20,\n    fontStyle: 'italic',\n  },\n});\n\nexport default WaterIntakeScreen;\n","import React from 'react';\nimport {View, Text, StyleSheet, Dimensions} from 'react-native';\nimport colors from '../styles/colors';\n\ninterface ChartDataPoint {\n  date: string;\n  value: number;\n  label: string;\n}\n\ninterface ProgressChartProps {\n  data: ChartDataPoint[];\n  goalValue?: number;\n  isWeight?: boolean;\n  isHeartRate?: boolean;\n}\n\nexport const ProgressChart: React.FC<ProgressChartProps> = ({\n  data,\n  goalValue,\n  isWeight = false,\n  isHeartRate = false,\n}) => {\n  if (data.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Text style={styles.emptyText}>No data to display</Text>\n      </View>\n    );\n  }\n\n  // Find the max value to scale the chart\n  const values = data.map(item => item.value);\n  const maxValue = Math.max(...values) * 1.1; // Add 10% padding to top\n  \n  // For weight charts, reverse the goal line position if goal is lower than current weight\n  const isWeightLossGoal = isWeight && goalValue && goalValue < Math.max(...values);\n  \n  // Calculate different chart colors based on the type\n  const getBarColor = (value: number) => {\n    if (isHeartRate) {\n      // Heart rate color based on ranges\n      if (value < 60) return colors.secondary;\n      if (value <= 100) return colors.success;\n      if (value <= 140) return colors.warning;\n      return colors.error;\n    }\n    \n    if (isWeight && goalValue) {\n      // Weight color based on goal (assuming lower is the goal)\n      return value <= goalValue ? colors.success : colors.primary;\n    }\n    \n    return colors.primary;\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Y-axis values */}\n      <View style={styles.yAxisContainer}>\n        <Text style={styles.axisText}>{maxValue.toFixed(0)}</Text>\n        <Text style={styles.axisText}>{(maxValue / 2).toFixed(0)}</Text>\n        <Text style={styles.axisText}>0</Text>\n      </View>\n      \n      {/* Chart area */}\n      <View style={styles.chartContainer}>\n        {/* Goal line if provided */}\n        {goalValue && goalValue <= maxValue && (\n          <View \n            style={[\n              styles.goalLine,\n              {\n                bottom: `${(goalValue / maxValue) * 100}%`,\n                borderColor: isWeightLossGoal ? colors.success : colors.warning\n              }\n            ]}\n          >\n            <Text style={[\n              styles.goalText,\n              {color: isWeightLossGoal ? colors.success : colors.warning}\n            ]}>\n              Goal: {goalValue}\n            </Text>\n          </View>\n        )}\n        \n        {/* Data bars */}\n        <View style={styles.barsContainer}>\n          {data.map((item, index) => {\n            const barHeight = (item.value / maxValue) * 100;\n            const barColor = getBarColor(item.value);\n            \n            return (\n              <View key={`${item.date}-${index}`} style={styles.barWrapper}>\n                <View style={styles.barLabelContainer}>\n                  <Text style={styles.barValue}>{item.value}</Text>\n                </View>\n                <View style={styles.barBackground}>\n                  <View \n                    style={[\n                      styles.bar, \n                      {\n                        height: `${barHeight}%`,\n                        backgroundColor: barColor\n                      }\n                    ]} \n                  />\n                </View>\n                <Text style={styles.barLabel}>{item.label}</Text>\n              </View>\n            );\n          })}\n        </View>\n        \n        {/* X-axis line */}\n        <View style={styles.xAxis} />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 250,\n    flexDirection: 'row',\n    marginVertical: 16,\n  },\n  emptyContainer: {\n    height: 250,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  emptyText: {\n    color: colors.textSecondary,\n    fontStyle: 'italic',\n  },\n  yAxisContainer: {\n    width: 40,\n    height: '100%',\n    justifyContent: 'space-between',\n    alignItems: 'flex-end',\n    paddingRight: 8,\n    paddingVertical: 8,\n  },\n  axisText: {\n    fontSize: 10,\n    color: colors.textSecondary,\n  },\n  chartContainer: {\n    flex: 1,\n    height: '100%',\n    position: 'relative',\n    paddingVertical: 8,\n    paddingBottom: 20, // Space for x-axis labels\n  },\n  goalLine: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    height: 1,\n    borderWidth: 1,\n    borderStyle: 'dashed',\n  },\n  goalText: {\n    position: 'absolute',\n    right: 0,\n    top: -16,\n    fontSize: 10,\n  },\n  barsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'flex-end',\n    height: '100%',\n  },\n  barWrapper: {\n    flex: 1,\n    alignItems: 'center',\n    height: '100%',\n  },\n  barLabelContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    alignItems: 'center',\n    zIndex: 1,\n  },\n  barValue: {\n    fontSize: 9,\n    color: colors.textSecondary,\n  },\n  barBackground: {\n    width: '60%',\n    height: '100%',\n    justifyContent: 'flex-end',\n  },\n  bar: {\n    width: '100%',\n    borderTopLeftRadius: 4,\n    borderTopRightRadius: 4,\n  },\n  barLabel: {\n    fontSize: 10,\n    color: colors.textSecondary,\n    marginTop: 4,\n  },\n  xAxis: {\n    position: 'absolute',\n    bottom: 20,\n    left: 0,\n    right: 0,\n    height: 1,\n    backgroundColor: colors.border,\n  },\n});\n","import React, {useState, useEffect} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {validateStepCount} from '../utils/validation';\nimport {getTodayDate, getTimestamp, formatDateForDisplay, getDateRange} from '../utils/dateUtils';\nimport {ProgressChart} from '../components/ProgressChart';\nimport colors from '../styles/colors';\n\nconst StepCountScreen: React.FC = () => {\n  const {stepCounts, addStepCount} = useHealthData();\n  const [stepCount, setStepCount] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [dailyGoal, setDailyGoal] = useState('10000'); // Default 10,000 steps\n  const [todaySteps, setTodaySteps] = useState(0);\n\n  useEffect(() => {\n    calculateTodaySteps();\n  }, [stepCounts]);\n\n  const calculateTodaySteps = () => {\n    const today = getTodayDate();\n    const todayEntries = stepCounts.filter(entry => entry.date === today);\n    if (todayEntries.length > 0) {\n      // Get the latest entry for today\n      const sortedEntries = [...todayEntries].sort(\n        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n      setTodaySteps(sortedEntries[0].count);\n    } else {\n      setTodaySteps(0);\n    }\n  };\n\n  const handleAddStepCount = () => {\n    // Validate input\n    const validationError = validateStepCount(stepCount);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    const stepsValue = parseInt(stepCount, 10);\n    const today = getTodayDate();\n    const timestamp = getTimestamp();\n\n    // Add step count\n    addStepCount({\n      id: `steps-${timestamp}`,\n      count: stepsValue,\n      date: today,\n      timestamp,\n    }).then(() => {\n      setStepCount('');\n      setError(null);\n      Alert.alert('Success', 'Step count updated successfully!');\n    }).catch(err => {\n      Alert.alert('Error', 'Failed to save step count.');\n      console.error(err);\n    });\n  };\n\n  const getWeeklyData = () => {\n    const last7Days = getDateRange(7);\n    const data = last7Days.map(date => {\n      const entriesForDay = stepCounts.filter(entry => entry.date === date);\n      if (entriesForDay.length > 0) {\n        // Get the latest entry for this day\n        const sortedEntries = [...entriesForDay].sort(\n          (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n        );\n        return {\n          date,\n          value: sortedEntries[0].count,\n          label: date.split('-')[2], // Just the day\n        };\n      }\n      return {\n        date,\n        value: 0,\n        label: date.split('-')[2], // Just the day\n      };\n    });\n    return data;\n  };\n\n  const progress = Math.min(todaySteps / parseInt(dailyGoal, 10), 1);\n  const weeklyData = getWeeklyData();\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Step Counter</Text>\n      \n      <View style={styles.progressContainer}>\n        <View style={styles.progressCircle}>\n          <Text style={styles.progressText}>{todaySteps}</Text>\n          <Text style={styles.progressLabel}>steps today</Text>\n        </View>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, {width: `${progress * 100}%`}]} />\n        </View>\n        <Text style={styles.goalText}>\n          Goal: {dailyGoal} steps ({Math.round(progress * 100)}%)\n        </Text>\n      </View>\n\n      <View style={styles.chartContainer}>\n        <Text style={styles.chartTitle}>Last 7 Days</Text>\n        <ProgressChart data={weeklyData} goalValue={parseInt(dailyGoal, 10)} />\n      </View>\n\n      <View style={styles.inputContainer}>\n        <Text style={styles.label}>Daily Goal:</Text>\n        <TextInput\n          style={styles.input}\n          value={dailyGoal}\n          onChangeText={setDailyGoal}\n          keyboardType=\"number-pad\"\n          placeholder=\"Set your daily step goal\"\n        />\n        \n        <Text style={styles.label}>Current Step Count:</Text>\n        <TextInput\n          style={styles.input}\n          value={stepCount}\n          onChangeText={setStepCount}\n          keyboardType=\"number-pad\"\n          placeholder=\"Enter today's step count\"\n        />\n        {error && <Text style={styles.errorText}>{error}</Text>}\n        \n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleAddStepCount}>\n          <Text style={styles.addButtonText}>Update Step Count</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.historyContainer}>\n        <Text style={styles.historyTitle}>History</Text>\n        {stepCounts.length > 0 ? (\n          [...stepCounts]\n            .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n            .slice(0, 7)\n            .map((entry) => (\n              <View key={entry.id} style={styles.historyItem}>\n                <Text style={styles.historyDate}>{formatDateForDisplay(entry.date)}</Text>\n                <Text style={styles.historySteps}>{entry.count} steps</Text>\n              </View>\n            ))\n        ) : (\n          <Text style={styles.emptyText}>No step count records yet</Text>\n        )}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  progressContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    alignItems: 'center',\n    elevation: 2,\n  },\n  progressCircle: {\n    width: 150,\n    height: 150,\n    borderRadius: 75,\n    borderWidth: 10,\n    borderColor: colors.secondary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  progressText: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  progressLabel: {\n    fontSize: 14,\n    color: colors.textSecondary,\n  },\n  progressBar: {\n    width: '100%',\n    height: 20,\n    backgroundColor: colors.lightGray,\n    borderRadius: 10,\n    overflow: 'hidden',\n    marginBottom: 10,\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: colors.primary,\n  },\n  goalText: {\n    fontSize: 16,\n    color: colors.text,\n  },\n  chartContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  inputContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 8,\n    color: colors.text,\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginBottom: 16,\n  },\n  errorText: {\n    color: colors.error,\n    marginBottom: 16,\n  },\n  addButton: {\n    backgroundColor: colors.primary,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  historyContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  historyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n    paddingVertical: 12,\n  },\n  historyDate: {\n    color: colors.textSecondary,\n  },\n  historySteps: {\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    marginVertical: 20,\n    fontStyle: 'italic',\n  },\n});\n\nexport default StepCountScreen;\n","import React, {useState, useEffect} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {validateWeight} from '../utils/validation';\nimport {getTodayDate, getTimestamp, formatDateForDisplay, getDateRange} from '../utils/dateUtils';\nimport {ProgressChart} from '../components/ProgressChart';\nimport colors from '../styles/colors';\n\nconst WeightScreen: React.FC = () => {\n  const {weights, addWeight} = useHealthData();\n  const [weight, setWeight] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [goalWeight, setGoalWeight] = useState('');\n  const [timeframe, setTimeframe] = useState<'week' | 'month'>('week');\n\n  useEffect(() => {\n    // Set initial goal weight based on latest entry if available\n    if (weights.length > 0 && !goalWeight) {\n      const sortedWeights = [...weights].sort(\n        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n      setGoalWeight((sortedWeights[0].value * 0.9).toFixed(1)); // 10% less than current as a default goal\n    }\n  }, [weights]);\n\n  const handleAddWeight = () => {\n    // Validate input\n    const validationError = validateWeight(weight);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    const weightValue = parseFloat(weight);\n    const today = getTodayDate();\n    const timestamp = getTimestamp();\n\n    // Add weight\n    addWeight({\n      id: `weight-${timestamp}`,\n      value: weightValue,\n      date: today,\n      timestamp,\n      note: note.trim() || undefined,\n    }).then(() => {\n      setWeight('');\n      setNote('');\n      setError(null);\n      Alert.alert('Success', 'Weight record added successfully!');\n    }).catch(err => {\n      Alert.alert('Error', 'Failed to save weight record.');\n      console.error(err);\n    });\n  };\n\n  const getLatestWeight = (): number | null => {\n    if (weights.length === 0) return null;\n    \n    const sortedWeights = [...weights].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n    return sortedWeights[0].value;\n  };\n\n  const getTrendData = () => {\n    const days = timeframe === 'week' ? 7 : 30;\n    const dateRange = getDateRange(days);\n    \n    // Create a map with the latest weight entry for each date\n    const weightByDate = new Map<string, number>();\n    \n    weights.forEach(entry => {\n      if (!weightByDate.has(entry.date) || \n          new Date(entry.timestamp).getTime() > \n          new Date(weights.find(w => w.date === entry.date)?.timestamp || 0).getTime()) {\n        weightByDate.set(entry.date, entry.value);\n      }\n    });\n    \n    // Create data points for the chart\n    const data = dateRange.map(date => {\n      return {\n        date,\n        value: weightByDate.get(date) || 0,\n        label: date.split('-')[2], // Just the day\n      };\n    });\n    \n    // Filter out days without data\n    return data.filter(item => item.value > 0);\n  };\n\n  const latestWeight = getLatestWeight();\n  const trendData = getTrendData();\n  const isGoalReached = latestWeight !== null && goalWeight !== '' && latestWeight <= parseFloat(goalWeight);\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Weight Tracker</Text>\n      \n      <View style={styles.summaryContainer}>\n        <View style={styles.summaryItem}>\n          <Text style={styles.summaryLabel}>Current</Text>\n          <Text style={styles.summaryValue}>\n            {latestWeight !== null ? `${latestWeight} kg` : '-'}\n          </Text>\n        </View>\n        \n        <View style={styles.summaryItem}>\n          <Text style={styles.summaryLabel}>Goal</Text>\n          <TextInput\n            style={styles.goalInput}\n            value={goalWeight}\n            onChangeText={setGoalWeight}\n            keyboardType=\"numeric\"\n            placeholder=\"Set goal\"\n          />\n        </View>\n        \n        {latestWeight !== null && goalWeight !== '' && (\n          <View style={styles.summaryItem}>\n            <Text style={styles.summaryLabel}>To Go</Text>\n            <Text style={[\n              styles.summaryValue,\n              isGoalReached ? styles.goalReached : styles.goalNotReached\n            ]}>\n              {isGoalReached ? 'Goal reached!' : `${(latestWeight - parseFloat(goalWeight)).toFixed(1)} kg`}\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {trendData.length > 0 && (\n        <View style={styles.chartContainer}>\n          <View style={styles.chartHeader}>\n            <Text style={styles.chartTitle}>Weight Trend</Text>\n            <View style={styles.timeframeButtons}>\n              <TouchableOpacity\n                style={[\n                  styles.timeframeButton,\n                  timeframe === 'week' ? styles.timeframeButtonActive : null,\n                ]}\n                onPress={() => setTimeframe('week')}>\n                <Text style={timeframe === 'week' ? styles.timeframeTextActive : styles.timeframeText}>\n                  Week\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={[\n                  styles.timeframeButton,\n                  timeframe === 'month' ? styles.timeframeButtonActive : null,\n                ]}\n                onPress={() => setTimeframe('month')}>\n                <Text style={timeframe === 'month' ? styles.timeframeTextActive : styles.timeframeText}>\n                  Month\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n          <ProgressChart \n            data={trendData} \n            goalValue={goalWeight ? parseFloat(goalWeight) : undefined}\n            isWeight={true}\n          />\n        </View>\n      )}\n\n      <View style={styles.inputContainer}>\n        <Text style={styles.label}>Record Weight (kg):</Text>\n        <TextInput\n          style={styles.input}\n          value={weight}\n          onChangeText={setWeight}\n          keyboardType=\"numeric\"\n          placeholder=\"Enter your weight in kg\"\n        />\n        {error && <Text style={styles.errorText}>{error}</Text>}\n        \n        <Text style={styles.label}>Note (optional):</Text>\n        <TextInput\n          style={[styles.input, styles.noteInput]}\n          value={note}\n          onChangeText={setNote}\n          placeholder=\"Add a note about your weight\"\n          multiline\n        />\n        \n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleAddWeight}>\n          <Text style={styles.addButtonText}>Add Weight Record</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.historyContainer}>\n        <Text style={styles.historyTitle}>History</Text>\n        {weights.length > 0 ? (\n          [...weights]\n            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n            .slice(0, 10)\n            .map((entry) => (\n              <View key={entry.id} style={styles.historyItem}>\n                <View>\n                  <Text style={styles.historyDate}>{formatDateForDisplay(entry.date)}</Text>\n                  {entry.note && <Text style={styles.historyNote}>{entry.note}</Text>}\n                </View>\n                <Text style={styles.historyWeight}>{entry.value} kg</Text>\n              </View>\n            ))\n        ) : (\n          <Text style={styles.emptyText}>No weight records yet</Text>\n        )}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    justifyContent: 'space-around',\n    elevation: 2,\n  },\n  summaryItem: {\n    alignItems: 'center',\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: colors.textSecondary,\n    marginBottom: 5,\n  },\n  summaryValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.text,\n  },\n  goalInput: {\n    width: 80,\n    height: 40,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    textAlign: 'center',\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n  },\n  goalReached: {\n    color: colors.success,\n  },\n  goalNotReached: {\n    color: colors.warning,\n  },\n  chartContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  chartHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.text,\n  },\n  timeframeButtons: {\n    flexDirection: 'row',\n  },\n  timeframeButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    marginLeft: 8,\n  },\n  timeframeButtonActive: {\n    backgroundColor: colors.primary,\n  },\n  timeframeText: {\n    color: colors.textSecondary,\n  },\n  timeframeTextActive: {\n    color: colors.white,\n    fontWeight: 'bold',\n  },\n  inputContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 8,\n    color: colors.text,\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginBottom: 16,\n  },\n  noteInput: {\n    height: 100,\n    textAlignVertical: 'top',\n  },\n  errorText: {\n    color: colors.error,\n    marginBottom: 16,\n  },\n  addButton: {\n    backgroundColor: colors.primary,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  historyContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  historyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n    paddingVertical: 12,\n  },\n  historyDate: {\n    color: colors.text,\n    fontWeight: '500',\n  },\n  historyNote: {\n    color: colors.textSecondary,\n    fontSize: 12,\n    marginTop: 4,\n    maxWidth: 250,\n  },\n  historyWeight: {\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    marginVertical: 20,\n    fontStyle: 'italic',\n  },\n});\n\nexport default WeightScreen;\n","import React, {useState} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {validateBloodPressure} from '../utils/validation';\nimport {getTodayDate, getTimestamp, formatDateForDisplay} from '../utils/dateUtils';\nimport colors from '../styles/colors';\n\nconst BloodPressureScreen: React.FC = () => {\n  const {bloodPressures, addBloodPressure} = useHealthData();\n  const [systolic, setSystolic] = useState('');\n  const [diastolic, setDiastolic] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  const handleAddBloodPressure = () => {\n    // Validate input\n    const validationError = validateBloodPressure(systolic, diastolic);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    const systolicValue = parseInt(systolic, 10);\n    const diastolicValue = parseInt(diastolic, 10);\n    const today = getTodayDate();\n    const timestamp = getTimestamp();\n\n    // Add blood pressure reading\n    addBloodPressure({\n      id: `bp-${timestamp}`,\n      systolic: systolicValue,\n      diastolic: diastolicValue,\n      date: today,\n      timestamp,\n      note: note.trim() || undefined,\n    }).then(() => {\n      setSystolic('');\n      setDiastolic('');\n      setNote('');\n      setError(null);\n      Alert.alert('Success', 'Blood pressure reading added successfully!');\n    }).catch(err => {\n      Alert.alert('Error', 'Failed to save blood pressure reading.');\n      console.error(err);\n    });\n  };\n\n  const getLatestReading = () => {\n    if (bloodPressures.length === 0) return null;\n    \n    return [...bloodPressures].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )[0];\n  };\n\n  const getBloodPressureCategory = (systolic: number, diastolic: number) => {\n    if (systolic < 120 && diastolic < 80) {\n      return {category: 'Normal', color: colors.success};\n    } else if ((systolic >= 120 && systolic <= 129) && diastolic < 80) {\n      return {category: 'Elevated', color: colors.warning};\n    } else if ((systolic >= 130 && systolic <= 139) || (diastolic >= 80 && diastolic <= 89)) {\n      return {category: 'High (Stage 1)', color: colors.warning};\n    } else if (systolic >= 140 || diastolic >= 90) {\n      return {category: 'High (Stage 2)', color: colors.error};\n    } else if (systolic > 180 || diastolic > 120) {\n      return {category: 'Hypertensive Crisis', color: colors.error};\n    }\n    return {category: 'Unknown', color: colors.textSecondary};\n  };\n\n  const latestReading = getLatestReading();\n  const category = latestReading \n    ? getBloodPressureCategory(latestReading.systolic, latestReading.diastolic) \n    : null;\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Blood Pressure Monitor</Text>\n      \n      {latestReading && (\n        <View style={styles.latestContainer}>\n          <Text style={styles.latestTitle}>Latest Reading</Text>\n          <View style={styles.readingDisplay}>\n            <Text style={styles.readingValue}>\n              {latestReading.systolic}/{latestReading.diastolic}\n            </Text>\n            <Text style={styles.readingUnit}>mmHg</Text>\n          </View>\n          <Text style={[styles.categoryText, {color: category?.color}]}>\n            {category?.category}\n          </Text>\n          <Text style={styles.dateText}>\n            {formatDateForDisplay(latestReading.date)} at {new Date(latestReading.timestamp).toLocaleTimeString()}\n          </Text>\n        </View>\n      )}\n\n      <View style={styles.chartContainer}>\n        <Text style={styles.chartTitle}>Healthy Ranges</Text>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.success}]} />\n          <Text style={styles.rangeText}>Normal: &lt;120/80 mmHg</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.warning}]} />\n          <Text style={styles.rangeText}>Elevated: 120-129/&lt;80 mmHg</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.warning}]} />\n          <Text style={styles.rangeText}>High (Stage 1): 130-139/80-89 mmHg</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.error}]} />\n          <Text style={styles.rangeText}>High (Stage 2): &gt;=140/&gt;=90 mmHg</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.error}]} />\n          <Text style={styles.rangeText}>Crisis: &gt;180/&gt;120 mmHg</Text>\n        </View>\n      </View>\n\n      <View style={styles.inputContainer}>\n        <View style={styles.bpInputRow}>\n          <View style={styles.bpInputColumn}>\n            <Text style={styles.label}>Systolic (mmHg):</Text>\n            <TextInput\n              style={styles.input}\n              value={systolic}\n              onChangeText={setSystolic}\n              keyboardType=\"number-pad\"\n              placeholder=\"120\"\n            />\n          </View>\n          <View style={styles.bpInputColumn}>\n            <Text style={styles.label}>Diastolic (mmHg):</Text>\n            <TextInput\n              style={styles.input}\n              value={diastolic}\n              onChangeText={setDiastolic}\n              keyboardType=\"number-pad\"\n              placeholder=\"80\"\n            />\n          </View>\n        </View>\n        \n        {error && <Text style={styles.errorText}>{error}</Text>}\n        \n        <Text style={styles.label}>Note (optional):</Text>\n        <TextInput\n          style={[styles.input, styles.noteInput]}\n          value={note}\n          onChangeText={setNote}\n          placeholder=\"Add a note about your reading\"\n          multiline\n        />\n        \n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleAddBloodPressure}>\n          <Text style={styles.addButtonText}>Add Blood Pressure Reading</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.historyContainer}>\n        <Text style={styles.historyTitle}>History</Text>\n        {bloodPressures.length > 0 ? (\n          [...bloodPressures]\n            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n            .slice(0, 10)\n            .map((entry) => {\n              const entryCategory = getBloodPressureCategory(entry.systolic, entry.diastolic);\n              return (\n                <View key={entry.id} style={styles.historyItem}>\n                  <View>\n                    <Text style={styles.historyDate}>{formatDateForDisplay(entry.date)}</Text>\n                    {entry.note && <Text style={styles.historyNote}>{entry.note}</Text>}\n                  </View>\n                  <View style={styles.historyValuesContainer}>\n                    <Text style={styles.historyValues}>\n                      {entry.systolic}/{entry.diastolic}\n                    </Text>\n                    <Text style={[styles.historyCategory, {color: entryCategory.color}]}>\n                      {entryCategory.category}\n                    </Text>\n                  </View>\n                </View>\n              );\n            })\n        ) : (\n          <Text style={styles.emptyText}>No blood pressure records yet</Text>\n        )}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  latestContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    alignItems: 'center',\n    elevation: 2,\n  },\n  latestTitle: {\n    fontSize: 16,\n    color: colors.textSecondary,\n    marginBottom: 10,\n  },\n  readingDisplay: {\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    marginBottom: 5,\n  },\n  readingValue: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  readingUnit: {\n    fontSize: 16,\n    color: colors.textSecondary,\n    marginLeft: 5,\n  },\n  categoryText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  dateText: {\n    fontSize: 14,\n    color: colors.textSecondary,\n  },\n  chartContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  rangeItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  rangeColor: {\n    width: 16,\n    height: 16,\n    borderRadius: 8,\n    marginRight: 10,\n  },\n  rangeText: {\n    fontSize: 14,\n    color: colors.text,\n  },\n  inputContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  bpInputRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  bpInputColumn: {\n    flex: 1,\n    marginRight: 8,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 8,\n    color: colors.text,\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginBottom: 16,\n  },\n  noteInput: {\n    height: 100,\n    textAlignVertical: 'top',\n  },\n  errorText: {\n    color: colors.error,\n    marginBottom: 16,\n  },\n  addButton: {\n    backgroundColor: colors.primary,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  historyContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  historyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n    paddingVertical: 12,\n  },\n  historyDate: {\n    color: colors.text,\n    fontWeight: '500',\n  },\n  historyNote: {\n    color: colors.textSecondary,\n    fontSize: 12,\n    marginTop: 4,\n    maxWidth: 200,\n  },\n  historyValuesContainer: {\n    alignItems: 'flex-end',\n  },\n  historyValues: {\n    fontWeight: 'bold',\n    color: colors.primary,\n    fontSize: 16,\n  },\n  historyCategory: {\n    fontSize: 12,\n    marginTop: 2,\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    marginVertical: 20,\n    fontStyle: 'italic',\n  },\n});\n\nexport default BloodPressureScreen;\n","import React, {useState} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {validateHeartRate} from '../utils/validation';\nimport {getTodayDate, getTimestamp, formatDateForDisplay, getDateRange} from '../utils/dateUtils';\nimport {ProgressChart} from '../components/ProgressChart';\nimport colors from '../styles/colors';\n\nconst HeartRateScreen: React.FC = () => {\n  const {heartRates, addHeartRate} = useHealthData();\n  const [heartRate, setHeartRate] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [timeframe, setTimeframe] = useState<'day' | 'week'>('day');\n\n  const handleAddHeartRate = () => {\n    // Validate input\n    const validationError = validateHeartRate(heartRate);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    const bpmValue = parseInt(heartRate, 10);\n    const today = getTodayDate();\n    const timestamp = getTimestamp();\n\n    // Add heart rate reading\n    addHeartRate({\n      id: `hr-${timestamp}`,\n      bpm: bpmValue,\n      date: today,\n      timestamp,\n      note: note.trim() || undefined,\n    }).then(() => {\n      setHeartRate('');\n      setNote('');\n      setError(null);\n      Alert.alert('Success', 'Heart rate reading added successfully!');\n    }).catch(err => {\n      Alert.alert('Error', 'Failed to save heart rate reading.');\n      console.error(err);\n    });\n  };\n\n  const getLatestReading = () => {\n    if (heartRates.length === 0) return null;\n    \n    return [...heartRates].sort(\n      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )[0];\n  };\n\n  const getHeartRateCategory = (bpm: number) => {\n    // These are general categories and may vary by age, fitness level, etc.\n    if (bpm < 60) {\n      return {category: 'Resting', color: colors.secondary};\n    } else if (bpm >= 60 && bpm <= 100) {\n      return {category: 'Normal', color: colors.success};\n    } else if (bpm > 100 && bpm <= 140) {\n      return {category: 'Elevated', color: colors.warning};\n    } else {\n      return {category: 'High', color: colors.error};\n    }\n  };\n\n  const getChartData = () => {\n    let filteredHeartRates;\n    const today = getTodayDate();\n    \n    if (timeframe === 'day') {\n      // Get today's heart rates\n      filteredHeartRates = heartRates.filter(hr => hr.date === today);\n    } else {\n      // Get last 7 days heart rates\n      const last7Days = getDateRange(7);\n      filteredHeartRates = heartRates.filter(hr => last7Days.includes(hr.date));\n    }\n    \n    // Sort by timestamp\n    filteredHeartRates.sort((a, b) => \n      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n    \n    // Format data for the chart\n    return filteredHeartRates.map(hr => ({\n      date: hr.date,\n      value: hr.bpm,\n      label: timeframe === 'day' \n        ? new Date(hr.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) \n        : hr.date.split('-')[2], // Just the day\n    }));\n  };\n\n  const latestReading = getLatestReading();\n  const category = latestReading \n    ? getHeartRateCategory(latestReading.bpm) \n    : null;\n  const chartData = getChartData();\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Heart Rate Monitor</Text>\n      \n      {latestReading && (\n        <View style={styles.latestContainer}>\n          <Text style={styles.latestTitle}>Latest Reading</Text>\n          <View style={styles.readingDisplay}>\n            <Text style={styles.readingValue}>\n              {latestReading.bpm}\n            </Text>\n            <Text style={styles.readingUnit}>BPM</Text>\n          </View>\n          <Text style={[styles.categoryText, {color: category?.color}]}>\n            {category?.category}\n          </Text>\n          <Text style={styles.dateText}>\n            {formatDateForDisplay(latestReading.date)} at {new Date(latestReading.timestamp).toLocaleTimeString()}\n          </Text>\n        </View>\n      )}\n\n      {chartData.length > 0 && (\n        <View style={styles.chartContainer}>\n          <View style={styles.chartHeader}>\n            <Text style={styles.chartTitle}>Heart Rate Trend</Text>\n            <View style={styles.timeframeButtons}>\n              <TouchableOpacity\n                style={[\n                  styles.timeframeButton,\n                  timeframe === 'day' ? styles.timeframeButtonActive : null,\n                ]}\n                onPress={() => setTimeframe('day')}>\n                <Text style={timeframe === 'day' ? styles.timeframeTextActive : styles.timeframeText}>\n                  Today\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={[\n                  styles.timeframeButton,\n                  timeframe === 'week' ? styles.timeframeButtonActive : null,\n                ]}\n                onPress={() => setTimeframe('week')}>\n                <Text style={timeframe === 'week' ? styles.timeframeTextActive : styles.timeframeText}>\n                  Week\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n          <ProgressChart data={chartData} isHeartRate={true} />\n        </View>\n      )}\n\n      <View style={styles.rangesContainer}>\n        <Text style={styles.rangesTitle}>Heart Rate Ranges</Text>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.secondary}]} />\n          <Text style={styles.rangeText}>Resting: &lt;60 BPM</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.success}]} />\n          <Text style={styles.rangeText}>Normal: 60-100 BPM</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.warning}]} />\n          <Text style={styles.rangeText}>Elevated: 101-140 BPM</Text>\n        </View>\n        <View style={styles.rangeItem}>\n          <View style={[styles.rangeColor, {backgroundColor: colors.error}]} />\n          <Text style={styles.rangeText}>High: &gt;140 BPM</Text>\n        </View>\n      </View>\n\n      <View style={styles.inputContainer}>\n        <Text style={styles.label}>Heart Rate (BPM):</Text>\n        <TextInput\n          style={styles.input}\n          value={heartRate}\n          onChangeText={setHeartRate}\n          keyboardType=\"number-pad\"\n          placeholder=\"Enter beats per minute\"\n        />\n        {error && <Text style={styles.errorText}>{error}</Text>}\n        \n        <Text style={styles.label}>Note (optional):</Text>\n        <TextInput\n          style={[styles.input, styles.noteInput]}\n          value={note}\n          onChangeText={setNote}\n          placeholder=\"Add a note about your reading (e.g., after exercise)\"\n          multiline\n        />\n        \n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleAddHeartRate}>\n          <Text style={styles.addButtonText}>Add Heart Rate Reading</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.historyContainer}>\n        <Text style={styles.historyTitle}>History</Text>\n        {heartRates.length > 0 ? (\n          [...heartRates]\n            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n            .slice(0, 10)\n            .map((entry) => {\n              const entryCategory = getHeartRateCategory(entry.bpm);\n              return (\n                <View key={entry.id} style={styles.historyItem}>\n                  <View>\n                    <Text style={styles.historyDate}>\n                      {formatDateForDisplay(entry.date)} at {new Date(entry.timestamp).toLocaleTimeString()}\n                    </Text>\n                    {entry.note && <Text style={styles.historyNote}>{entry.note}</Text>}\n                  </View>\n                  <View style={styles.historyValuesContainer}>\n                    <Text style={styles.historyValues}>\n                      {entry.bpm} BPM\n                    </Text>\n                    <Text style={[styles.historyCategory, {color: entryCategory.color}]}>\n                      {entryCategory.category}\n                    </Text>\n                  </View>\n                </View>\n              );\n            })\n        ) : (\n          <Text style={styles.emptyText}>No heart rate records yet</Text>\n        )}\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  latestContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    alignItems: 'center',\n    elevation: 2,\n  },\n  latestTitle: {\n    fontSize: 16,\n    color: colors.textSecondary,\n    marginBottom: 10,\n  },\n  readingDisplay: {\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    marginBottom: 5,\n  },\n  readingValue: {\n    fontSize: 42,\n    fontWeight: 'bold',\n    color: colors.primary,\n  },\n  readingUnit: {\n    fontSize: 18,\n    color: colors.textSecondary,\n    marginLeft: 5,\n  },\n  categoryText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  dateText: {\n    fontSize: 14,\n    color: colors.textSecondary,\n  },\n  chartContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  chartHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  chartTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.text,\n  },\n  timeframeButtons: {\n    flexDirection: 'row',\n  },\n  timeframeButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    marginLeft: 8,\n  },\n  timeframeButtonActive: {\n    backgroundColor: colors.primary,\n  },\n  timeframeText: {\n    color: colors.textSecondary,\n  },\n  timeframeTextActive: {\n    color: colors.white,\n    fontWeight: 'bold',\n  },\n  rangesContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  rangesTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  rangeItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  rangeColor: {\n    width: 16,\n    height: 16,\n    borderRadius: 8,\n    marginRight: 10,\n  },\n  rangeText: {\n    fontSize: 14,\n    color: colors.text,\n  },\n  inputContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 8,\n    color: colors.text,\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginBottom: 16,\n  },\n  noteInput: {\n    height: 100,\n    textAlignVertical: 'top',\n  },\n  errorText: {\n    color: colors.error,\n    marginBottom: 16,\n  },\n  addButton: {\n    backgroundColor: colors.primary,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  historyContainer: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 20,\n    elevation: 2,\n  },\n  historyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: colors.text,\n  },\n  historyItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n    paddingVertical: 12,\n  },\n  historyDate: {\n    color: colors.text,\n    fontWeight: '500',\n  },\n  historyNote: {\n    color: colors.textSecondary,\n    fontSize: 12,\n    marginTop: 4,\n    maxWidth: 200,\n  },\n  historyValuesContainer: {\n    alignItems: 'flex-end',\n  },\n  historyValues: {\n    fontWeight: 'bold',\n    color: colors.primary,\n    fontSize: 16,\n  },\n  historyCategory: {\n    fontSize: 12,\n    marginTop: 2,\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    marginVertical: 20,\n    fontStyle: 'italic',\n  },\n});\n\nexport default HeartRateScreen;\n","import React, {useState, useEffect} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Modal,\n} from 'react-native';\nimport {useHealthData} from '../contexts/HealthDataContext';\nimport {validateHabitName} from '../utils/validation';\nimport {getTodayDate, formatDateForDisplay, getDaysOfCurrentWeek, getDayOfWeek} from '../utils/dateUtils';\nimport colors from '../styles/colors';\n\nconst DAYS_OF_WEEK = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nconst HabitTrackingScreen: React.FC = () => {\n  const {habits, addHabit, updateHabit, deleteHabit, toggleHabitCompletion} = useHealthData();\n  const [habitName, setHabitName] = useState('');\n  const [habitDescription, setHabitDescription] = useState('');\n  const [selectedDays, setSelectedDays] = useState<string[]>([]);\n  const [habitColor, setHabitColor] = useState(colors.primary);\n  const [error, setError] = useState<string | null>(null);\n  const [editMode, setEditMode] = useState(false);\n  const [editingHabitId, setEditingHabitId] = useState<string | null>(null);\n  const [showModal, setShowModal] = useState(false);\n  const [weekDays, setWeekDays] = useState<string[]>([]);\n\n  useEffect(() => {\n    setWeekDays(getDaysOfCurrentWeek());\n  }, []);\n\n  const resetForm = () => {\n    setHabitName('');\n    setHabitDescription('');\n    setSelectedDays([]);\n    setHabitColor(colors.primary);\n    setError(null);\n    setEditMode(false);\n    setEditingHabitId(null);\n  };\n\n  const handleSaveHabit = () => {\n    // Validate input\n    const validationError = validateHabitName(habitName);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    if (selectedDays.length === 0) {\n      setError('Please select at least one day for the habit');\n      return;\n    }\n\n    const timestamp = new Date().toISOString();\n\n    if (editMode && editingHabitId) {\n      // Update existing habit\n      updateHabit(editingHabitId, {\n        name: habitName,\n        description: habitDescription.trim() || undefined,\n        frequency: selectedDays,\n        color: habitColor,\n      }).then(() => {\n        resetForm();\n        setShowModal(false);\n        Alert.alert('Success', 'Habit updated successfully!');\n      }).catch(err => {\n        Alert.alert('Error', 'Failed to update habit.');\n        console.error(err);\n      });\n    } else {\n      // Add new habit\n      addHabit({\n        id: `habit-${timestamp}`,\n        name: habitName,\n        description: habitDescription.trim() || undefined,\n        frequency: selectedDays,\n        createdAt: timestamp,\n        completedDates: [],\n        color: habitColor,\n      }).then(() => {\n        resetForm();\n        setShowModal(false);\n        Alert.alert('Success', 'Habit added successfully!');\n      }).catch(err => {\n        Alert.alert('Error', 'Failed to save habit.');\n        console.error(err);\n      });\n    }\n  };\n\n  const handleEditHabit = (habit: any) => {\n    setHabitName(habit.name);\n    setHabitDescription(habit.description || '');\n    setSelectedDays(habit.frequency);\n    setHabitColor(habit.color || colors.primary);\n    setEditingHabitId(habit.id);\n    setEditMode(true);\n    setShowModal(true);\n  };\n\n  const handleDeleteHabit = (habitId: string) => {\n    Alert.alert(\n      'Delete Habit',\n      'Are you sure you want to delete this habit? This action cannot be undone.',\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Delete',\n          onPress: () => {\n            deleteHabit(habitId).then(() => {\n              Alert.alert('Success', 'Habit deleted successfully!');\n            }).catch(err => {\n              Alert.alert('Error', 'Failed to delete habit.');\n              console.error(err);\n            });\n          },\n          style: 'destructive',\n        },\n      ]\n    );\n  };\n\n  const handleToggleDay = (day: string) => {\n    if (selectedDays.includes(day)) {\n      setSelectedDays(selectedDays.filter(d => d !== day));\n    } else {\n      setSelectedDays([...selectedDays, day]);\n    }\n  };\n\n  const handleToggleHabitCompletion = (habitId: string, date: string) => {\n    toggleHabitCompletion(habitId, date).catch(err => {\n      Alert.alert('Error', 'Failed to update habit completion status.');\n      console.error(err);\n    });\n  };\n\n  const isHabitCompletedForDate = (habit: any, date: string) => {\n    return habit.completedDates.includes(date);\n  };\n\n  const isHabitScheduledForDay = (habit: any, dayOfWeek: number) => {\n    return habit.frequency.includes(DAYS_OF_WEEK[dayOfWeek]);\n  };\n\n  const renderColorOption = (color: string) => (\n    <TouchableOpacity\n      key={color}\n      style={[\n        styles.colorOption,\n        {backgroundColor: color},\n        habitColor === color && styles.colorOptionSelected,\n      ]}\n      onPress={() => setHabitColor(color)}\n    />\n  );\n\n  const colorOptions = [\n    colors.primary,\n    colors.secondary,\n    colors.success,\n    colors.warning,\n    colors.error,\n    '#9C27B0', // Purple\n    '#2196F3', // Blue\n    '#607D8B', // Blue Grey\n  ];\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Habit Tracker</Text>\n      \n      <View style={styles.weekContainer}>\n        {DAYS_OF_WEEK.map(day => (\n          <View key={day} style={styles.weekDay}>\n            <Text style={styles.weekDayText}>{day}</Text>\n          </View>\n        ))}\n      </View>\n      \n      <ScrollView style={styles.habitsContainer}>\n        {habits.length > 0 ? (\n          habits.map(habit => (\n            <View \n              key={habit.id} \n              style={[styles.habitItem, {borderLeftColor: habit.color || colors.primary}]}\n            >\n              <View style={styles.habitHeader}>\n                <Text style={styles.habitName}>{habit.name}</Text>\n                <View style={styles.habitActions}>\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.editButton]}\n                    onPress={() => handleEditHabit(habit)}>\n                    <Text style={styles.actionButtonText}>Edit</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.deleteButton]}\n                    onPress={() => handleDeleteHabit(habit.id)}>\n                    <Text style={styles.actionButtonText}>Delete</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n              \n              {habit.description && (\n                <Text style={styles.habitDescription}>{habit.description}</Text>\n              )}\n              \n              <View style={styles.habitFrequency}>\n                <Text style={styles.frequencyLabel}>Frequency: </Text>\n                <Text style={styles.frequencyDays}>\n                  {habit.frequency.join(', ')}\n                </Text>\n              </View>\n              \n              <View style={styles.completionGrid}>\n                {weekDays.map((date, index) => {\n                  const dayOfWeek = getDayOfWeek(date);\n                  const isScheduled = isHabitScheduledForDay(habit, dayOfWeek);\n                  const isCompleted = isHabitCompletedForDate(habit, date);\n                  \n                  return (\n                    <TouchableOpacity\n                      key={date}\n                      style={[\n                        styles.completionCell,\n                        !isScheduled && styles.completionCellDisabled,\n                        isScheduled && isCompleted && styles.completionCellCompleted,\n                      ]}\n                      onPress={() => isScheduled && handleToggleHabitCompletion(habit.id, date)}\n                      disabled={!isScheduled}\n                    >\n                      <Text style={styles.completionCellText}>\n                        {date.split('-')[2]}\n                      </Text>\n                    </TouchableOpacity>\n                  );\n                })}\n              </View>\n            </View>\n          ))\n        ) : (\n          <Text style={styles.emptyText}>\n            No habits added yet. Create your first habit by tapping the \"Add Habit\" button below.\n          </Text>\n        )}\n      </ScrollView>\n\n      <TouchableOpacity\n        style={styles.addButton}\n        onPress={() => {\n          resetForm();\n          setShowModal(true);\n        }}>\n        <Text style={styles.addButtonText}>Add Habit</Text>\n      </TouchableOpacity>\n\n      <Modal\n        visible={showModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowModal(false)}>\n        <View style={styles.modalContainer}>\n          <View style={styles.modalContent}>\n            <Text style={styles.modalTitle}>\n              {editMode ? 'Edit Habit' : 'Add New Habit'}\n            </Text>\n            \n            <Text style={styles.label}>Habit Name:</Text>\n            <TextInput\n              style={styles.input}\n              value={habitName}\n              onChangeText={setHabitName}\n              placeholder=\"Enter habit name\"\n            />\n            \n            <Text style={styles.label}>Description (optional):</Text>\n            <TextInput\n              style={[styles.input, styles.textArea]}\n              value={habitDescription}\n              onChangeText={setHabitDescription}\n              placeholder=\"Enter a description\"\n              multiline\n            />\n            \n            <Text style={styles.label}>Frequency:</Text>\n            <View style={styles.daysContainer}>\n              {DAYS_OF_WEEK.map(day => (\n                <TouchableOpacity\n                  key={day}\n                  style={[\n                    styles.dayButton,\n                    selectedDays.includes(day) && styles.dayButtonSelected,\n                  ]}\n                  onPress={() => handleToggleDay(day)}>\n                  <Text\n                    style={[\n                      styles.dayButtonText,\n                      selectedDays.includes(day) && styles.dayButtonTextSelected,\n                    ]}>\n                    {day}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n            \n            <Text style={styles.label}>Color:</Text>\n            <View style={styles.colorsContainer}>\n              {colorOptions.map(color => renderColorOption(color))}\n            </View>\n            \n            {error && <Text style={styles.errorText}>{error}</Text>}\n            \n            <View style={styles.modalButtons}>\n              <TouchableOpacity\n                style={[styles.modalButton, styles.cancelButton]}\n                onPress={() => {\n                  resetForm();\n                  setShowModal(false);\n                }}>\n                <Text style={styles.modalButtonText}>Cancel</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={[styles.modalButton, styles.saveButton]}\n                onPress={handleSaveHabit}>\n                <Text style={styles.modalButtonText}>\n                  {editMode ? 'Update' : 'Save'}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: colors.background,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.primary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  weekContainer: {\n    flexDirection: 'row',\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 10,\n    marginBottom: 16,\n    elevation: 2,\n  },\n  weekDay: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  weekDayText: {\n    fontWeight: 'bold',\n    color: colors.text,\n  },\n  habitsContainer: {\n    flex: 1,\n    marginBottom: 16,\n  },\n  habitItem: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 16,\n    borderLeftWidth: 5,\n    elevation: 2,\n  },\n  habitHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  habitName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.text,\n    flex: 1,\n  },\n  habitActions: {\n    flexDirection: 'row',\n  },\n  actionButton: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    marginLeft: 8,\n  },\n  editButton: {\n    backgroundColor: colors.secondary,\n  },\n  deleteButton: {\n    backgroundColor: colors.error,\n  },\n  actionButtonText: {\n    color: colors.white,\n    fontSize: 12,\n  },\n  habitDescription: {\n    color: colors.textSecondary,\n    marginBottom: 8,\n  },\n  habitFrequency: {\n    flexDirection: 'row',\n    marginBottom: 12,\n  },\n  frequencyLabel: {\n    color: colors.text,\n    fontWeight: '500',\n  },\n  frequencyDays: {\n    color: colors.textSecondary,\n  },\n  completionGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  completionCell: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    borderWidth: 1,\n    borderColor: colors.border,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: colors.inputBackground,\n  },\n  completionCellDisabled: {\n    opacity: 0.3,\n  },\n  completionCellCompleted: {\n    backgroundColor: colors.success,\n    borderColor: colors.success,\n  },\n  completionCellText: {\n    fontSize: 12,\n    color: colors.text,\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: colors.textSecondary,\n    marginVertical: 30,\n    fontStyle: 'italic',\n  },\n  addButton: {\n    backgroundColor: colors.primary,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  addButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  modalContent: {\n    backgroundColor: colors.cardBackground,\n    borderRadius: 8,\n    padding: 20,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: colors.primary,\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 8,\n    color: colors.text,\n  },\n  input: {\n    height: 50,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 8,\n    padding: 10,\n    fontSize: 16,\n    backgroundColor: colors.inputBackground,\n    marginBottom: 16,\n  },\n  textArea: {\n    height: 100,\n    textAlignVertical: 'top',\n  },\n  daysContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginBottom: 16,\n  },\n  dayButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: colors.border,\n    marginRight: 8,\n    marginBottom: 8,\n  },\n  dayButtonSelected: {\n    backgroundColor: colors.primary,\n    borderColor: colors.primary,\n  },\n  dayButtonText: {\n    color: colors.text,\n  },\n  dayButtonTextSelected: {\n    color: colors.white,\n  },\n  colorsContainer: {\n    flexDirection: 'row',\n    marginBottom: 16,\n  },\n  colorOption: {\n    width: 30,\n    height: 30,\n    borderRadius: 15,\n    marginRight: 10,\n  },\n  colorOptionSelected: {\n    borderWidth: 2,\n    borderColor: colors.text,\n  },\n  errorText: {\n    color: colors.error,\n    marginBottom: 16,\n  },\n  modalButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  modalButton: {\n    flex: 1,\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginHorizontal: 5,\n  },\n  cancelButton: {\n    backgroundColor: colors.textSecondary,\n  },\n  saveButton: {\n    backgroundColor: colors.primary,\n  },\n  modalButtonText: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default HabitTrackingScreen;\n","import React from 'react';\nimport {createBottomTabNavigator} from '@react-navigation/bottom-tabs';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {RootStackParamList} from '../types';\nimport HomeScreen from '../screens/HomeScreen';\nimport WaterIntakeScreen from '../screens/WaterIntakeScreen';\nimport StepCountScreen from '../screens/StepCountScreen';\nimport WeightScreen from '../screens/WeightScreen';\nimport BloodPressureScreen from '../screens/BloodPressureScreen';\nimport HeartRateScreen from '../screens/HeartRateScreen';\nimport HabitTrackingScreen from '../screens/HabitTrackingScreen';\nimport colors from '../styles/colors';\nimport {View, Text, StyleSheet} from 'react-native';\n\nconst Tab = createBottomTabNavigator<RootStackParamList>();\nconst Stack = createStackNavigator<RootStackParamList>();\n\n// Simple custom tab icons\nconst TabIcon: React.FC<{name: string; focused: boolean}> = ({name, focused}) => {\n  // Get the appropriate icon based on the tab name\n  const getIconContent = () => {\n    switch (name) {\n      case 'Home':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.homeIcon} />\n          </View>\n        );\n      case 'WaterIntake':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.waterDropTop} />\n            <View style={styles.waterDropBottom} />\n          </View>\n        );\n      case 'StepCount':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.stepIcon}>\n              <View style={styles.stepLine1} />\n              <View style={styles.stepLine2} />\n            </View>\n          </View>\n        );\n      case 'Weight':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.weightIcon} />\n          </View>\n        );\n      case 'BloodPressure':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.bpIcon} />\n          </View>\n        );\n      case 'HeartRate':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.heartShape} />\n          </View>\n        );\n      case 'HabitTracking':\n        return (\n          <View style={styles.iconCircle}>\n            <View style={styles.habitIcon}>\n              <View style={styles.checkmark} />\n            </View>\n          </View>\n        );\n      default:\n        return <View style={styles.iconCircle} />;\n    }\n  };\n\n  return (\n    <View style={styles.tabIcon}>\n      {getIconContent()}\n      <Text\n        style={[\n          styles.tabLabel,\n          {color: focused ? colors.primary : colors.textSecondary},\n        ]}>\n        {name === 'WaterIntake'\n          ? 'Water'\n          : name === 'StepCount'\n          ? 'Steps'\n          : name === 'BloodPressure'\n          ? 'BP'\n          : name === 'HeartRate'\n          ? 'Heart'\n          : name === 'HabitTracking'\n          ? 'Habits'\n          : name}\n      </Text>\n    </View>\n  );\n};\n\nconst AppNavigator: React.FC = () => {\n  return (\n    <Tab.Navigator\n  screenOptions={({ route }) => ({\n    tabBarIcon: ({ focused }) => <TabIcon name={route.name} focused={focused} />,\n    tabBarActiveTintColor: colors.primary,\n    tabBarInactiveTintColor: colors.textSecondary,\n    tabBarStyle: {\n      height: 60,\n      paddingBottom: 5,\n      paddingTop: 5,\n      backgroundColor: colors.cardBackground,\n      borderTopColor: colors.border,\n    },\n    tabBarLabelStyle: {\n      fontSize: 10,\n    },\n    headerShown: false, // Hide the header for all screens\n  })}\n>\n\n<Tab.Screen \n  name=\"Home\" \n  component={HomeScreen} \n  options={{ title: 'Health Tracker', headerShown: false }} \n/>\n\n      <Tab.Screen \n        name=\"WaterIntake\" \n        component={WaterIntakeScreen} \n        options={{title: 'Water Intake', headerShown: false}}\n      />\n      <Tab.Screen \n        name=\"StepCount\" \n        component={StepCountScreen} \n        options={{title: 'Step Counter', headerShown: false}}\n      />\n      <Tab.Screen \n        name=\"Weight\" \n        component={WeightScreen} \n        options={{title: 'Weight Tracker', headerShown: false}}\n      />\n      <Tab.Screen \n        name=\"BloodPressure\" \n        component={BloodPressureScreen} \n        options={{title: 'Blood Pressure', headerShown: false}}\n      />\n      <Tab.Screen \n        name=\"HeartRate\" \n        component={HeartRateScreen} \n        options={{title: 'Heart Rate', headerShown: false}}\n      />\n      <Tab.Screen \n        name=\"HabitTracking\" \n        component={HabitTrackingScreen} \n        options={{title: 'Habit Tracker', headerShown: false}}\n      />\n    </Tab.Navigator>\n  );\n};\n\nconst styles = StyleSheet.create({\n  tabIcon: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  tabLabel: {\n    fontSize: 10,\n    marginTop: 2,\n  },\n  iconCircle: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  // Home icon\n  homeIcon: {\n    width: 12,\n    height: 12,\n    borderWidth: 2,\n    borderColor: colors.primary,\n    borderRadius: 2,\n  },\n  // Water icon\n  waterDropTop: {\n    width: 0,\n    height: 0,\n    backgroundColor: 'transparent',\n    borderStyle: 'solid',\n    borderLeftWidth: 6,\n    borderRightWidth: 6,\n    borderBottomWidth: 12,\n    borderLeftColor: 'transparent',\n    borderRightColor: 'transparent',\n    borderBottomColor: colors.primary,\n    transform: [{rotate: '180deg'}],\n  },\n  waterDropBottom: {\n    position: 'absolute',\n    bottom: 0,\n    width: 12,\n    height: 6,\n    borderBottomLeftRadius: 6,\n    borderBottomRightRadius: 6,\n    backgroundColor: colors.primary,\n  },\n  // Step icon\n  stepIcon: {\n    width: 16,\n    height: 16,\n    justifyContent: 'center',\n  },\n  stepLine1: {\n    position: 'absolute',\n    width: 16,\n    height: 2,\n    backgroundColor: colors.primary,\n    transform: [{rotate: '45deg'}],\n  },\n  stepLine2: {\n    position: 'absolute',\n    width: 10,\n    height: 2,\n    backgroundColor: colors.primary,\n    left: -2,\n    bottom: 2,\n    transform: [{rotate: '-45deg'}],\n  },\n  // Weight icon\n  weightIcon: {\n    width: 16,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: colors.primary,\n  },\n  // Blood pressure icon\n  bpIcon: {\n    width: 8,\n    height: 16,\n    borderRadius: 4,\n    backgroundColor: colors.primary,\n  },\n  // Heart rate icon\n  heartShape: {\n    width: 10,\n    height: 10,\n    backgroundColor: colors.primary,\n    borderRadius: 5,\n    transform: [{rotate: '45deg'}],\n  },\n  // Habit tracking icon\n  habitIcon: {\n    width: 16,\n    height: 16,\n    borderWidth: 2,\n    borderColor: colors.primary,\n    borderRadius: 2,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  checkmark: {\n    width: 8,\n    height: 5,\n    borderLeftWidth: 2,\n    borderBottomWidth: 2,\n    borderColor: colors.primary,\n    transform: [{rotate: '-45deg'}],\n    marginTop: -2,\n  },\n});\n\nexport default AppNavigator;\n","import React from 'react';\nimport {SafeAreaView, StatusBar, StyleSheet, useColorScheme} from 'react-native';\nimport {NavigationContainer} from '@react-navigation/native';\nimport AppNavigator from './src/navigation/AppNavigator';\nimport {HealthDataProvider} from './src/contexts/HealthDataContext';\n\nconst App = () => {\n  const isDarkMode = useColorScheme() === 'dark';\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />\n      <HealthDataProvider>\n        <NavigationContainer>\n          <AppNavigator />\n        </NavigationContainer>\n      </HealthDataProvider>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default App;\n","import { registerRootComponent } from 'expo';\nimport App from './App';\n\nregisterRootComponent(App);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [751], () => (__webpack_require__(2934)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["defaultHealthData","waterIntake","stepCounts","weights","bloodPressures","heartRates","habits","HealthDataContext","createContext","undefined","HealthDataProvider","children","healthData","setHealthData","useState","isLoading","setIsLoading","useEffect","async","data","AsyncStorage","getItem","JSON","parse","error","console","loadData","saveHealthData","setItem","stringify","value","addWaterIntake","updatedData","Object","assign","intake","addStepCount","steps","addWeight","weight","addBloodPressure","bp","addHeartRate","hr","addHabit","habit","updateHabit","habitId","updates","updatedHabits","map","id","deleteHabit","filter","toggleHabitCompletion","date","completedDates","dateIndex","indexOf","slice","_jsx","Provider","useHealthData","context","useContext","Error","formatDate","getFullYear","String","getMonth","padStart","getDate","getTimestamp","Date","toISOString","getTodayDate","getDateRange","days","dates","today","i","setDate","push","reverse","formatDateForDisplay","dateStr","toLocaleDateString","weekday","month","day","primary","secondary","background","cardBackground","text","textSecondary","border","inputBackground","lightGray","white","black","success","warning","info","water","bloodPressure","heartRate","styles","StyleSheet","create","container","flex","padding","backgroundColor","colors","loadingContainer","justifyContent","alignItems","loadingText","marginTop","fontSize","color","title","fontWeight","textAlign","marginBottom","grid","flexDirection","flexWrap","card","width","borderRadius","elevation","waterCard","borderTopColor","borderTopWidth","stepsCard","weightCard","bpCard","heartCard","habitCard","cardTitle","cardValue","cardSubtitle","habitProgress","habitCount","habitLabel","tipsContainer","tipsTitle","tip","lineHeight","HomeScreen","navigation","useNavigation","getLatestWeight","length","sort","a","b","timestamp","getTime","getLatestHeartRate","bpm","getHabitsForToday","dayName","getDay","frequency","includes","_jsxs","View","style","ActivityIndicator","size","Text","ScrollView","TouchableOpacity","onPress","navigate","entry","reduce","sum","amount","getTodaySteps","todayEntries","count","getLatestBloodPressure","latestEntry","systolic","diastolic","marginVertical","waterBottle","height","bottleOutline","borderWidth","borderColor","overflow","position","bottom","left","right","cap","top","alignSelf","contentContainer","progressText","amountText","infoContainer","paddingHorizontal","infoItem","infoValue","infoLabel","WaterIntakeTracker","progress","current","goal","waveHeight","Math","round","inputContainer","label","input","errorText","quickButtons","quickButton","marginHorizontal","quickButtonText","addButton","addButtonText","goalContainer","goalInput","marginLeft","historyContainer","historyTitle","historyItem","borderBottomWidth","borderBottomColor","paddingVertical","historyDate","historyAmount","emptyText","fontStyle","WaterIntakeScreen","setAmount","setError","dailyGoal","setDailyGoal","todayIntake","setTodayIntake","calculateTodayIntake","total","getRecentEntries","min","parseInt","TextInput","onChangeText","keyboardType","placeholder","handleAddWaterIntake","validationError","parseFloat","isNaN","validateWaterIntake","amountValue","then","Alert","alert","catch","err","index","toLocaleTimeString","ProgressChart","goalValue","isWeight","isHeartRate","emptyContainer","values","item","maxValue","max","isWeightLossGoal","yAxisContainer","axisText","toFixed","chartContainer","goalLine","goalText","barsContainer","barHeight","barColor","barWrapper","barLabelContainer","barValue","barBackground","bar","barLabel","xAxis","paddingRight","paddingBottom","borderStyle","zIndex","borderTopLeftRadius","borderTopRightRadius","progressContainer","progressCircle","progressLabel","progressBar","progressFill","chartTitle","historySteps","StepCountScreen","stepCount","setStepCount","todaySteps","setTodaySteps","calculateTodaySteps","sortedEntries","weeklyData","entriesForDay","split","handleAddStepCount","validateStepCount","stepsValue","summaryContainer","summaryItem","summaryLabel","summaryValue","goalReached","goalNotReached","chartHeader","timeframeButtons","timeframeButton","timeframeButtonActive","timeframeText","timeframeTextActive","noteInput","textAlignVertical","historyNote","maxWidth","historyWeight","WeightScreen","setWeight","note","setNote","goalWeight","setGoalWeight","timeframe","setTimeframe","sortedWeights","latestWeight","trendData","getTrendData","dateRange","weightByDate","Map","forEach","has","find","w","set","get","isGoalReached","multiline","handleAddWeight","validateWeight","weightValue","trim","latestContainer","latestTitle","readingDisplay","readingValue","readingUnit","categoryText","dateText","rangeItem","rangeColor","marginRight","rangeText","bpInputRow","bpInputColumn","historyValuesContainer","historyValues","historyCategory","BloodPressureScreen","setSystolic","setDiastolic","getBloodPressureCategory","category","latestReading","handleAddBloodPressure","validateBloodPressure","systolicValue","diastolicValue","entryCategory","rangesContainer","rangesTitle","HeartRateScreen","setHeartRate","getHeartRateCategory","chartData","getChartData","filteredHeartRates","last7Days","hour","minute","handleAddHeartRate","validateHeartRate","bpmValue","DAYS_OF_WEEK","weekContainer","weekDay","weekDayText","habitsContainer","habitItem","borderLeftWidth","habitHeader","habitName","habitActions","actionButton","editButton","deleteButton","actionButtonText","habitDescription","habitFrequency","frequencyLabel","frequencyDays","completionGrid","completionCell","completionCellDisabled","opacity","completionCellCompleted","completionCellText","modalContainer","modalContent","maxHeight","modalTitle","textArea","daysContainer","dayButton","dayButtonSelected","dayButtonText","dayButtonTextSelected","colorsContainer","colorOption","colorOptionSelected","modalButtons","modalButton","cancelButton","saveButton","modalButtonText","HabitTrackingScreen","setHabitName","setHabitDescription","selectedDays","setSelectedDays","habitColor","setHabitColor","editMode","setEditMode","editingHabitId","setEditingHabitId","showModal","setShowModal","weekDays","setWeekDays","resetForm","colorOptions","borderLeftColor","name","description","handleEditHabit","handleDeleteHabit","join","dayOfWeek","isScheduled","isHabitScheduledForDay","isCompleted","isHabitCompletedForDate","handleToggleHabitCompletion","disabled","Modal","visible","animationType","transparent","onRequestClose","d","handleToggleDay","renderColorOption","handleSaveHabit","createdAt","Tab","createBottomTabNavigator","TabIcon","createStackNavigator","focused","tabIcon","getIconContent","iconCircle","homeIcon","waterDropTop","waterDropBottom","stepIcon","stepLine1","stepLine2","weightIcon","bpIcon","heartShape","habitIcon","checkmark","tabLabel","borderRightWidth","borderRightColor","transform","rotate","borderBottomLeftRadius","borderBottomRightRadius","AppNavigator","Navigator","screenOptions","route","tabBarIcon","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarStyle","paddingTop","tabBarLabelStyle","headerShown","Screen","component","options","App","isDarkMode","useColorScheme","SafeAreaView","StatusBar","barStyle","NavigationContainer","registerRootComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","key","splice","r","n","getter","__esModule","definition","o","defineProperty","enumerable","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}